#!/usr/bin/env bash
#
# Summary: Find virtual environments that use pyenv-managed versions.
#
# Usage: pyenv users [-A|--absolute-paths] [-r|--raw] [directory]
#
#   -A/--absolute-paths  Output absolute paths instead of relative paths
#   -r/--raw             Raw output strings as "<version>:<venv-path>"
#
# Scans [directory] for virtual environments whose `python` commands
# are symlinks back into a pyenv version. Default: current directory.

set -e

parse_options() {
  # Parse the command line options. Taken from `pyenv-virtualenv`
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$((index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

unset ABSOLUTE RAW
parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "A" | "absolute-paths" )
    ABSOLUTE=1
    ;;
  "r" | "raw" )
    RAW=1
    ;;
  "h" | "help" )
    pyenv help users
    exit 0
    ;;
  * )
    echo "pyenv-users: unrecognized option '$option'"
    exit 1
    ;;
  esac
done

if [[ "${#ARGUMENTS[@]}" == 0 ]]; then
  DIR="$PYENV_DIR"
elif [[ "${#ARGUMENTS[@]}" == 1 ]]; then
  DIR="${ARGUMENTS[0]}"
else
  echo "pyenv-users: too many directory arguments"
  exit 1
fi
if [ -n "$ABSOLUTE" ]; then
  PREFIX=""
else
  PREFIX="$DIR/"
fi


# ----------------------------------------------------------------------------
# Finished parsing the arguments. Begin the actual functionality.

# The `links` are the symlink pathnames, `versions` are pyenv version strings,
# and `venvs` are venv pathnames. Using parallel arrays since arrays-of-arrays
# are a pain in bash. Keeping versions and venvs separate avoids needing awk.
declare -a links versions venvs
declare readlink realpath find

if [ -n "$(type -p greadlink)" ]; then
  readlink="$(type -p greadlink)"
else
  readlink="readlink"
fi

if [ -n "$(type -p grealpath)" ]; then
  realpath="$(type -p grealpath)"
else
  realpath="realpath"
fi

if [ -n "$(type -p gfind)" ]; then
  find="$(type -p gfind)"
else
  find="find"
fi

if [ -z "$PYENV_ROOT" ]; then
  PYENV_ROOT=$(pyenv root)
fi

# Collect all symlinks named `python` that point into $PYENV_ROOT
cmd="${readlink} -f '{}' | grep -q ${PYENV_ROOT}"
while IFS= read -r -d $'\0' file; do
  links+=("$file")
done < <(${find} -H "$DIR" -name "python" -type l -exec sh -c "$cmd" \; -print0)

# Turn each link into a (version, venv) string pair
regex="${PYENV_ROOT}/versions/(.+)/bin/(.+)"
for link in "${links[@]}"; do
  linkpath=$(${realpath} -s "$link")
  target=$(${readlink} -f "$link")
  [[ "$target" =~ $regex ]]
  version="${BASH_REMATCH[1]}"
  # Only capture links outside PYENV_ROOT or inside pyenv-virtualenv venvs
  if grep -v -q "$PYENV_ROOT" <<< "$linkpath" || \
     grep -q "$PYENV_ROOT/versions/$version/envs" <<< "$linkpath"
  then
    versions+=("$version")
    venvs+=("${link%/bin/python}")
  fi
done

# Print each (version, venv) pair
declare -i K=${#versions[@]} width=0 maxwidth=0
for (( k=0; k < K; k++ )); do
  width=${#versions[k]}
  if (( width > maxwidth )); then maxwidth=$width; fi
done
for (( k=0; k < K; k++ )); do
  if [ -n "$RAW" ]; then
    echo "${versions[$k]}":"${venvs[$k]#$PREFIX}"
  else
    printf "%-*s  %s\n" "$maxwidth" "${versions[$k]}" "${venvs[k]#$PREFIX}"
  fi
done | sort
